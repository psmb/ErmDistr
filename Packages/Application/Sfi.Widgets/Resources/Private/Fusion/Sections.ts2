# Sections object renders children into responsive tabs.
# Tabs content is completely decoupled from structure.
# You can use the same principle to create very advanced content blocks decoupled from its content.
prototype(Sfi.Widgets:Sections) {
	sectionName = 'main'
	layout = ${q(node).property('layout')}

	tabs = Neos.Fusion:Collection {
		collection = ${q(node).children()}
		itemRenderer = Sfi.Widgets:SectionsTabRenderer
		itemName = 'node'
	}

	panels = Neos.Fusion:Collection {
		collection = ${q(node).children()}
		itemRenderer = Sfi.Widgets:SectionsPanelRenderer
		itemName = 'node'
	}
}

prototype(Sfi.Widgets:SectionsAbstractRenderer) < prototype(Neos.Fusion:Template) {
	sectionName = 'to-be-set'
	templatePath = 'resource://Sfi.Widgets/Private/Templates/NodeTypes/Sections.html'
	node = ${q(node).get(0)}
}
prototype(Sfi.Widgets:SectionsTabRenderer) < prototype(Sfi.Widgets:SectionsAbstractRenderer) {
	sectionName = 'tab'
	tab = Sfi.Widgets:AutoRender {
		@override.section = 'tab'
	}
}
prototype(Sfi.Widgets:SectionsPanelRenderer) < prototype(Sfi.Widgets:SectionsAbstractRenderer) {
	sectionName = 'panel'
	accordion = Sfi.Widgets:AutoRender {
		@override.section = 'accordion'
	}
	panel = Sfi.Widgets:AutoRender {
		@override.section = 'panel'
	}
}

# Example simple tab content implementation with just content collection.
# Can be something way more fancy like tabs with images or whatever you can imagine.
# Its template must provide 3 sections: tab, accordion and panel.
prototype(Sfi.Widgets:Section) {
	sectionName = ${section}
	node = ${q(node).get(0)}
	content = Sfi.Widgets:ContentCollection
}